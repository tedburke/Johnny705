///////////////////////////////////
////// DO NOT EDIT THIS FILE //////
///////////////////////////////////

//
// Johnny705 robot simulator for TU705 Engineering Computing 2.1
// Written by Ted Burke - last updated 17-Oct-2021
// arduino.cpp - mainly simulated Arduino functions
//

#include <thread>
#include "arduino.h"

// Function prototypes for Arduino functions in robot.cpp
extern void setup();
extern void loop();

Robot::Robot()
{
    int n;
    for (n=0 ; n<8 ; ++n) Ax[n] = 0;
    for (n=0 ; n<13 ; ++n)
    {
        Dmode[n] = INPUT;
        Dx[n] = 1; // float pins high when not driven high or low
    }

    x = 200; y = 200; w = 100; h = 100; angle = 0;
    speedLeft = 1.0; speedRight = 1.0; // as a factor of maxSpeed
    maxSpeed = 50; // pixels per second

    baudrate = 0;

    startClockTime = clock();
}

Robot g_robot;

SerialClass Serial;

bool g_running = 0;

void robot_thread_function()
{
    setup();

    while(g_running)
    {
        // Relinquish control for a few ms to allow other threads to run.
        // Not really sure if this is useful or not!
        std::this_thread::sleep_for(std::chrono::milliseconds(1));

        loop();
    }
}

void pinMode(uint8_t pin, uint8_t mode)
{
    if (pin < 0 || pin >= 13) return;
    g_robot.Dmode[pin] = mode;
    if (mode == INPUT) g_robot.Dx[pin] = 1;
    else g_robot.Dx[pin] = 0;
}

int digitalRead(uint8_t pin)
{
    if (pin < 0 || pin >= 13) return 0;
    return g_robot.Dx[pin];
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    if (pin < 0 || pin >= 13) return;
    g_robot.Dx[pin] = val;
}

int analogRead(uint8_t pin)
{
    if (pin < 0 || pin >= 8) return 0;
    return g_robot.Ax[pin];
}

void analogWrite(uint8_t pin, int val)
{

}

void delay(unsigned long ms)
{
    long end_time = clock() + (ms*CLOCKS_PER_SEC/1000.0);
    while (clock() < end_time)
    {
        std::this_thread::sleep_for(std::chrono::milliseconds(1));
    }
}

unsigned long millis()
{
    return (clock() - g_robot.startClockTime)*1000.0/CLOCKS_PER_SEC;
}

unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)
{
    return 0;
}

long random(long maxval)
{
    return rand() % maxval;
}

long random(long minval, long maxval)
{
    return ((rand() % (maxval-minval)) + minval);
}

void randomSeed(unsigned long seed)
{
    srand(seed);
}
